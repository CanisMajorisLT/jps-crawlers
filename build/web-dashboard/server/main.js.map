{"version":3,"sources":["web-dashboard/server/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,QAAQ,gBAAR;;;AAOA,IAAM,aAAa,eAAK,IAAL,CAAU,SAAV,EAAqB,UAArB,EAAiC,gBAAjC,CAAb;;AAEN,IAAM,MAAM,wBAAN;AACN,IAAI,GAAJ,CAAQ,kBAAQ,MAAR,CAAe,eAAK,IAAL,CAAU,SAAV,EAAqB,UAArB,EAAiC,QAAjC,CAAf,CAAR;AACA,IAAI,GAAJ,CAAQ,2BAAR;;AAEA,IAAI,GAAJ,CAAQ,GAAR,EAAa,UAAS,GAAT,EAAc,GAAd,EAAkB;AAC3B,QAAI,QAAJ,CAAa,eAAK,IAAL,CAAU,SAAV,EAAqB,UAArB,EAAiC,mBAAjC,CAAb,EAD2B;CAAlB,CAAb;;AAIA,IAAI,GAAJ,CAAQ,UAAR;wDAAoB,iBAAe,GAAf,EAAoB,GAApB;YACV;;;;;;+BAAe;;;AAAf;;AACN,4BAAI,IAAJ,CAAS,MAAT;;;;;;;;KAFgB;;;;;GAApB;;AAKA,IAAI,IAAJ,CAAS,UAAT;wDAAqB,kBAAe,GAAf,EAAoB,GAApB;YAEP,WACA;;;;;;;+BADkB;;;AAAlB;AACA,oCAAY,IAAI,IAAJ;;+BAEZ,YAAY,SAAZ;;;AACN,4BAAI,IAAJ,CAAS,EAAC,SAAS,IAAT,EAAV;;AAEA,4BAAI,UAAU,OAAV,CAAkB,aAAlB,KAAoC,UAAU,OAAV,CAAkB,aAAlB,EAAiC;AACrE,mDAAe,SAAf,EADqE;yBAAzE;;;;;;;;;AAKA,4BAAI,IAAJ,CAAS,EAAC,SAAS,KAAT,EAAgB,mBAAjB,EAAT;;;;;;;;KAba;;;;;GAArB;;AAkBA,IAAI,MAAJ,CAAW,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAApB,CAAX;AACA,QAAQ,GAAR,CAAY,oBAAZ,EAAkC,QAAQ,GAAR,CAAY,IAAZ,IAAoB,IAApB,CAAlC;;AAGA,SAAS,UAAT,GAAsB;AAClB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAY;AAC3B,qBAAG,QAAH,CAAY,UAAZ,EAAwB,UAAC,GAAD,EAAM,OAAN,EAAiB;AACrC,oBAAQ,KAAK,KAAL,CAAW,OAAX,CAAR,EADqC;SAAjB,CAAxB,CAD2B;KAAZ,CAAnB,CADkB;CAAtB;;AASA,SAAS,WAAT,CAAqB,IAArB,EAA2B;AACvB,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAoB;AACnC,qBAAG,SAAH,CAAa,UAAb,EAAyB,KAAK,SAAL,CAAe,IAAf,CAAzB,EAA+C,UAAC,KAAD,EAAU;AACrD,qBAAS,OAAO,KAAP,CAAT,CADqD;AAErD,sBAFqD;SAAV,CAA/C,CADmC;KAApB,CAAnB,CADuB;CAA3B","file":"web-dashboard/server/main.js","sourcesContent":["require('babel-polyfill');\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport crawlerCrontab from '../../../crontab'\r\n\r\nconst configPath = path.join(__dirname, '../../..', '.jps-crawlerrc');\r\n\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, '../../..', 'public')));\r\napp.use(bodyParser());\r\n\r\napp.get('/', function(req, res){\r\n    res.sendFile(path.join(__dirname, '../../..', 'public/index.html'))\r\n});\r\n\r\napp.get('/options', async function(req, res) {\r\n    const config = await readConfig();\r\n    res.json(config); // TODO add fail\r\n});\r\n\r\napp.post('/options', async function(req, res) {\r\n    try {\r\n        const oldConfig = await readConfig();\r\n        const newConfig = req.body;\r\n\r\n        await writeConfig(newConfig);\r\n        res.json({success: true});\r\n\r\n        if (oldConfig.general.crawlInterval !== newConfig.general.crawlInterval) {\r\n            crawlerCrontab(newConfig)\r\n        }\r\n\r\n    } catch (e) {\r\n        res.json({success: false, error: e});\r\n    }\r\n\r\n});\r\n\r\napp.listen(process.env.PORT || 3000);\r\nconsole.log('Listening on port:', process.env.PORT || 3000);\r\n\r\n\r\nfunction readConfig() {\r\n    return new Promise((resolve)=> {\r\n        fs.readFile(configPath, (err, content)=> {\r\n            resolve(JSON.parse(content));\r\n        })\r\n    })\r\n\r\n}\r\n\r\nfunction writeConfig(data) {\r\n    return new Promise((resolve, reject)=> {\r\n        fs.writeFile(configPath, JSON.stringify(data), (error)=> {\r\n            error && reject(error);\r\n            resolve()\r\n        })\r\n    })\r\n\r\n}\r\n"],"sourceRoot":"/source/"}