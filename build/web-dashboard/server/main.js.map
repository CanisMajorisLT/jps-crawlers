{"version":3,"sources":["web-dashboard/server/main.js"],"names":["require","CrawlLog","model","ParsedAd","configPath","join","__dirname","app","use","static","get","req","res","sendFile","readConfig","config","json","post","newConfig","body","writeConfig","success","error","find","sort","limit","exec","crawlLogsData","crawlDate","count","parsedAdsNumber","crawlLogs","$natural","parsedAdsData","parsedAds","listen","process","env","PORT","info","Promise","resolve","readFile","err","content","JSON","parse","data","reject","writeFile","stringify"],"mappings":"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","file":"web-dashboard/server/main.js","sourcesContent":["require('babel-polyfill');\nrequire('../../../build/db/db');\nimport mongoose from 'mongoose';\nimport express from 'express'\nimport bodyParser from 'body-parser'\nimport fs from 'fs'\nimport path from 'path'\nimport logger from '../../../logging/logger'\n\nvar CrawlLog = mongoose.model('CrawlLog');\nvar ParsedAd = mongoose.model('ParsedAd');\n\nconst configPath = path.join(__dirname, '../../..', '.jps-crawlerrc');\n\nconst app = express();\napp.use(express.static(path.join(__dirname, '../../..', 'public')));\napp.use(bodyParser());\n\napp.get('/', function(req, res) {\n    res.sendFile(path.join(__dirname, '../../..', 'public/index.html'))\n});\n\napp.get('/options', async function(req, res) {\n    const config = await readConfig();\n    res.json(config); // TODO add fail\n});\n\napp.post('/options', async function(req, res) {\n    try {\n        const newConfig = req.body;\n        await writeConfig(newConfig);\n        res.json({success: true});\n\n    } catch (e) {\n        res.json({success: false, error: e});\n    }\n\n});\n\napp.get('/info', async function(req, res) {\n\n    try {\n        const crawlLogsData = await CrawlLog.find().sort('-crawlDate').limit(50).exec();\n        const parsedAdsNumber = await ParsedAd.find({'meta.parseDate': crawlLogsData[0].crawlDate}).count().exec();\n        res.json({success: true, crawlLogs: crawlLogsData, parsedAdsNumber: parsedAdsNumber});\n    } catch (e) {\n        res.json({success: false, error: e});\n\n    }\n    // error log,\n    // when is next crawl\n    // when was last crawl + short summary of how many parsed, errors\n    // totals crawls\n    // total ad records\n    // # of ads parsed in last 10 crawls [each], some examples of last ads..\n});\n\napp.get('/entries', async function(req, res) {\n    try {\n        const parsedAdsData = await ParsedAd.find().sort({$natural: -1}).limit(50);\n        res.json({success: true, parsedAds: parsedAdsData});\n    } catch (e) {\n        res.json({success: false, error: e});\n    }\n});\n\napp.listen(process.env.PORT || 3000);\nlogger.info('Listening on port:', process.env.PORT || 3000);\n\n\nfunction readConfig() {\n    return new Promise((resolve)=> {\n        fs.readFile(configPath, (err, content)=> {\n            resolve(JSON.parse(content));\n        })\n    })\n\n}\n\nfunction writeConfig(data) {\n    return new Promise((resolve, reject)=> {\n        fs.writeFile(configPath, JSON.stringify(data), (error)=> {\n            error && reject(error);\n            resolve()\n        })\n    })\n\n}\n"],"sourceRoot":"/source/"}