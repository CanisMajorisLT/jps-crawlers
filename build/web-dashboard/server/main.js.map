{"version":3,"sources":["web-dashboard/server/main.js"],"names":[],"mappings":"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","file":"web-dashboard/server/main.js","sourcesContent":["require('babel-polyfill');\r\nrequire('../../../build/db/db');\r\nimport mongoose from 'mongoose';\r\nimport express from 'express'\r\nimport bodyParser from 'body-parser'\r\nimport fs from 'fs'\r\nimport path from 'path'\r\nimport logger from '../../../logging/logger'\r\n\r\nvar CrawlLog = mongoose.model('CrawlLog');\r\nvar ParsedAd = mongoose.model('ParsedAd');\r\n\r\nconst configPath = path.join(__dirname, '../../..', '.jps-crawlerrc');\r\n\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, '../../..', 'public')));\r\napp.use(bodyParser());\r\n\r\napp.get('/', function(req, res) {\r\n    res.sendFile(path.join(__dirname, '../../..', 'public/index.html'))\r\n});\r\n\r\napp.get('/options', async function(req, res) {\r\n    const config = await readConfig();\r\n    res.json(config); // TODO add fail\r\n});\r\n\r\napp.post('/options', async function(req, res) {\r\n    try {\r\n        const newConfig = req.body;\r\n        await writeConfig(newConfig);\r\n        res.json({success: true});\r\n\r\n    } catch (e) {\r\n        res.json({success: false, error: e});\r\n    }\r\n\r\n});\r\n\r\napp.get('/info', async function(req, res) {\r\n\r\n    try {\r\n        const crawlLogsData = await CrawlLog.find().sort('-crawlDate').limit(100).exec();\r\n        res.json({success: true, crawlLogs: crawlLogsData});\r\n    } catch (e) {\r\n        res.json({success: false, error: e});\r\n\r\n    }\r\n    // error log,\r\n    // when is next crawl\r\n    // when was last crawl + short summary of how many parsed, errors\r\n    // totals crawls\r\n    // total ad records\r\n    // # of ads parsed in last 10 crawls [each], some examples of last ads..\r\n});\r\n\r\napp.get('/entries', async function(req, res) {\r\n    try {\r\n        const parsedAdsData = await ParsedAd.find().sort({$natural: -1}).limit(100);\r\n        res.json({success: true, parsedAds: parsedAdsData});\r\n    } catch (e) {\r\n        res.json({success: false, error: e});\r\n    }\r\n});\r\n\r\napp.listen(process.env.PORT || 3000);\r\nlogger.info('Listening on port:', process.env.PORT || 3000);\r\n\r\n\r\nfunction readConfig() {\r\n    return new Promise((resolve)=> {\r\n        fs.readFile(configPath, (err, content)=> {\r\n            resolve(JSON.parse(content));\r\n        })\r\n    })\r\n\r\n}\r\n\r\nfunction writeConfig(data) {\r\n    return new Promise((resolve, reject)=> {\r\n        fs.writeFile(configPath, JSON.stringify(data), (error)=> {\r\n            error && reject(error);\r\n            resolve()\r\n        })\r\n    })\r\n\r\n}\r\n"],"sourceRoot":"/source/"}