{"version":3,"sources":["db/models/parsedAd.js"],"names":["MODEL_NAME","ParsedAdSchema","Schema","adId","String","source","parsedData","uri","title","city","company","companySecondary","views","Number","meta","parseDate","Date","adIndex","pageNumber","statics","insertDocs","data","date","dataForInsert","map","ad","id","create","error","debug","model"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA;AACA;;AAEA,IAAMA,aAAa,UAAnB;;AAEA,IAAMC,iBAAiB,IAAI,mBAASC,MAAb,CAAoB;AACvCC,UAAMC,MADiC;AAEvCC,YAAQD,MAF+B;AAGvCE,gBAAY;AACRC,aAAKH,MADG;AAERI,eAAOJ,MAFC;AAGRK,cAAML,MAHE;AAIRM,iBAASN,MAJD;AAKRO,0BAAkBP,MALV;AAMRQ,eAAOC;AANC,KAH2B;AAWvCC,UAAM;AACFC,mBAAWC,IADT,EACe;AACjBC,iBAASJ,MAFP;AAGFK,oBAAYL;AAHV;AAXiC,CAApB,CAAvB;;AAkBAZ,eAAekB,OAAf,CAAuBC,UAAvB,GAAoC,SAASA,UAAT,CAAoBC,IAApB,EAA0BhB,MAA1B,EAAkCiB,IAAlC,EAAwC;;AAExE,QAAMC,gBAAgBF,KAAKG,GAAL,CAAS,UAACC,EAAD,EAAO;AAClC,eAAO;AACHtB,kBAAMsB,GAAGC,EADN;AAEHrB,oBAAQA,MAFL;AAGHC,wBAAY;AACRC,qBAAKkB,GAAGlB,GADA;AAERC,uBAAOiB,GAAGjB,KAFF;AAGRC,sBAAMgB,GAAGhB,IAHD;AAIRC,yBAASe,GAAGf,OAJJ;AAKRC,kCAAkBc,GAAGd,gBALb;AAMRC,uBAAOa,GAAGb;AANF,aAHT;AAWHE,kBAAM;AACFC,2BAAWO,IADT;AAEFL,yBAASQ,GAAGX,IAAH,CAAQG,OAFf;AAGFC,4BAAYO,GAAGX,IAAH,CAAQI;AAHlB;AAXH,SAAP;AAiBH,KAlBqB,CAAtB;;AAoBA,SAAKS,MAAL,CAAYJ,aAAZ,EAA2B,UAACK,KAAD,EAAU;AACjC,yBAAOC,KAAP,CAAa,gCAAb;AACAD,iBAAS,iBAAOA,KAAP,CAAa,oCAAb,EAAmD,EAACA,YAAD,EAAnD,CAAT;AACH,KAHD;AAIH,CA1BD;;AA6BA,mBAASE,KAAT,CAAe9B,UAAf,EAA2BC,cAA3B","file":"db/models/parsedAd.js","sourcesContent":["import mongoose from 'mongoose'\nimport logger from '../../../logging/logger'\n\n// TODO [refactor] use nodejs native mongo db driver, to insert dynamically created docs\n// construct API to dynamically create doc models\n\nconst MODEL_NAME = 'ParsedAd';\n\nconst ParsedAdSchema = new mongoose.Schema({\n    adId: String,\n    source: String,\n    parsedData: {\n        uri: String,\n        title: String,\n        city: String,\n        company: String,\n        companySecondary: String,\n        views: Number\n    },\n    meta: {\n        parseDate: Date, // should be same value for all entries on single crawl\n        adIndex: Number,\n        pageNumber: Number\n    }\n});\n\nParsedAdSchema.statics.insertDocs = function insertDocs(data, source, date) {\n\n    const dataForInsert = data.map((ad)=> {\n        return {\n            adId: ad.id,\n            source: source,\n            parsedData: {\n                uri: ad.uri,\n                title: ad.title,\n                city: ad.city,\n                company: ad.company,\n                companySecondary: ad.companySecondary,\n                views: ad.views\n            },\n            meta: {\n                parseDate: date,\n                adIndex: ad.meta.adIndex,\n                pageNumber: ad.meta.pageNumber\n            }\n        }\n    });\n\n    this.create(dataForInsert, (error)=> {\n        logger.debug('successfully created parsedads');\n        error && logger.error('Error  while creating new ParsedAd', {error});\n    })\n};\n\n\nmongoose.model(MODEL_NAME, ParsedAdSchema);"],"sourceRoot":"/source/"}