{"version":3,"sources":["crawlers/cvo/parser.js"],"names":[],"mappings":"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","file":"crawlers/cvo/parser.js","sourcesContent":["import $ from 'cheerio'\r\nimport { validateParse, isNotEmptyString, isNumber, isDate, isNotEmptyArray,\r\n         isNotElementNotFound, ELEMENT_NOT_FOUND} from '../common/validators'\r\n\r\n\r\n/**\r\n * Finds number of pages that display ads\r\n * @param {String} html\r\n * @returns {Number | String}\r\n * @private\r\n */\r\nfunction extractTotalPageCount_(html) {\r\n    var page = $.load(html);\r\n\r\n    const lastPageWithAdsUri = page('#pagination').children().last().attr('href');\r\n\r\n    const pagesCount = lastPageWithAdsUri.match(/=(\\d+)/)[1];\r\n\r\n    return pagesCount !== '' ? parseInt(pagesCount) : pagesCount\r\n}\r\n\r\nexport let extractTotalPageCount = validateParse(extractTotalPageCount_, [isNumber]);\r\n\r\n\r\n\r\nexport function extractFrontInfoForOneAd(element, index, pageNumber) {\r\n    var ad = $.load(element);\r\n\r\n    function getUri(ad) {\r\n        return ad('a[itemprop=title]').attr('href')\r\n    }\r\n\r\n    function getTitle(ad) {\r\n        return ad('a[itemprop=title]').text().trim()\r\n    }\r\n\r\n    function getId(ad) {\r\n        return ad('a[itemprop=title]').attr('target')\r\n    }\r\n\r\n    function getCompanyName(ad) {\r\n        return ad('span a.contentCompanyName').text().trim()\r\n    }\r\n\r\n    function getCity(ad) {\r\n        let city;\r\n\r\n        const matchedElement = ad('a[itemprop=address]');\r\n\r\n        // can't check for value not empty, since this element can have empty val, so we check for element not empty\r\n        if (matchedElement.length === 0) return ELEMENT_NOT_FOUND;\r\n\r\n        city =  ad('a[itemprop=address]').text();\r\n\r\n        if (city === '') return 'Unspecified';\r\n        else return city\r\n    }\r\n\r\n    function getViews(ad) {\r\n        ad('td a[itemprop=address]').remove();\r\n\r\n        const viewsWithText = ad('td[itemprop=jobLocation]').text().trim();\r\n        const views = viewsWithText.match(/\\s(\\d+)/)[1];\r\n        return parseInt(views)\r\n\r\n    }\r\n\r\n    function getExpiryDate(ad) {\r\n        const dateWithText = ad('td.t_jobs_tech p').text();\r\n        const expirtyDate = dateWithText.match(/iki\\s(\\d+\\.\\d+\\.\\d+)/)[1];\r\n        return new Date(expirtyDate)\r\n    }\r\n\r\n    return {\r\n        uri: validateParse(getUri, [isNotEmptyString])(ad),\r\n        title: validateParse(getTitle, [isNotEmptyString])(ad),\r\n        city: validateParse(getCity, [isNotEmptyString])(ad),\r\n        company: validateParse(getCompanyName, [isNotElementNotFound])(ad),\r\n        views: validateParse(getViews, [isNumber])(ad),\r\n        expiryDate: validateParse(getExpiryDate, [isDate])(ad),\r\n        id: validateParse(getId, [isNotEmptyString])(ad),\r\n        meta : {\r\n            adIndex: index,\r\n            pageNumber\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function extractFrontInfo(html, task){\r\n    const  page = $.load(html);\r\n\r\n    function getArticles(page) {\r\n        return page('#table_jobs tbody tr').filter(function(){\r\n            return $(this).text() !== 'Premium listing'\r\n        }).get().slice()\r\n    }\r\n\r\n\r\n    // last page can sometimes have no ads, so validation fires alarm too often\r\n    const articles = task.isLastPage ? getArticles(page) : validateParse(getArticles, [isNotEmptyArray])(page);\r\n\r\n    return articles.map((elem, index)=> extractFrontInfoForOneAd(elem, index, task.pageNumber))\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}