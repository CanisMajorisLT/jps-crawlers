{"version":3,"sources":["crawlers/cvo/parser.js"],"names":["extractFrontInfoForOneAd","extractFrontInfo","extractTotalPageCount_","html","page","load","lastPageWithAdsUri","children","last","attr","pagesCount","match","parseInt","extractTotalPageCount","element","index","pageNumber","ad","getUri","getTitle","text","trim","getId","getCompanyName","getCity","city","matchedElement","length","getViews","remove","viewsWithText","views","getExpiryDate","dateWithText","expirtyDate","Date","uri","title","company","expiryDate","id","meta","adIndex","task","getArticles","filter","get","slice","articles","isLastPage","map","elem"],"mappings":"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","file":"crawlers/cvo/parser.js","sourcesContent":["import $ from 'cheerio'\nimport { validateParse, isNotEmptyString, isNumber, isDate, isNotEmptyArray,\n         isNotElementNotFound, ELEMENT_NOT_FOUND} from '../lib/validators'\n\n\n/**\n * Finds number of pages that display ads\n * @param {String} html\n * @returns {Number | String}\n * @private\n */\nfunction extractTotalPageCount_(html) {\n    const page = $.load(html);\n\n    const lastPageWithAdsUri = page('#pagination').children().last().attr('href');\n\n    const pagesCount = lastPageWithAdsUri.match(/=(\\d+)/)[1];\n\n    return pagesCount !== '' ? parseInt(pagesCount) : pagesCount\n}\n\nexport let extractTotalPageCount = validateParse(extractTotalPageCount_, [isNumber]);\n\n\n\nexport function extractFrontInfoForOneAd(element, index, pageNumber) {\n    var ad = $.load(element);\n\n    function getUri(ad) {\n        return ad('a[itemprop=title]').attr('href')\n    }\n\n    function getTitle(ad) {\n        return ad('a[itemprop=title]').text().trim()\n    }\n\n    function getId(ad) {\n        return ad('a[itemprop=title]').attr('target')\n    }\n\n    function getCompanyName(ad) {\n        return ad('span a.contentCompanyName').text().trim()\n    }\n\n    function getCity(ad) {\n        let city;\n\n        const matchedElement = ad('a[itemprop=address]');\n\n        // can't check for value not empty, since this element can have empty val, so we check for element not empty\n        if (matchedElement.length === 0) return ELEMENT_NOT_FOUND;\n\n        city =  ad('a[itemprop=address]').text();\n\n        if (city === '') return 'Unspecified';\n        else return city\n    }\n\n    function getViews(ad) {\n        ad('td a[itemprop=address]').remove();\n\n        const viewsWithText = ad('td[itemprop=jobLocation]').text().trim();\n        const views = viewsWithText.match(/\\s(\\d+)/)[1];\n        return parseInt(views)\n\n    }\n\n    function getExpiryDate(ad) {\n        const dateWithText = ad('td.t_jobs_tech p').text();\n        const expirtyDate = dateWithText.match(/iki\\s(\\d+\\.\\d+\\.\\d+)/)[1];\n        return new Date(expirtyDate)\n    }\n\n    return {\n        uri: validateParse(getUri, [isNotEmptyString])(ad),\n        title: validateParse(getTitle, [isNotEmptyString])(ad),\n        city: validateParse(getCity, [isNotEmptyString])(ad),\n        company: validateParse(getCompanyName, [isNotElementNotFound])(ad),\n        views: validateParse(getViews, [isNumber])(ad),\n        expiryDate: validateParse(getExpiryDate, [isDate])(ad),\n        id: validateParse(getId, [isNotEmptyString])(ad),\n        meta : {\n            adIndex: index,\n            pageNumber\n        }\n    }\n}\n\n\nexport function extractFrontInfo(html, task){\n    const  page = $.load(html);\n\n    function getArticles(page) {\n        return page('#table_jobs tbody tr').filter(function(){\n            return $(this).text() !== 'Premium listing'\n        }).get().slice()\n    }\n\n\n    // last page can sometimes have no ads, so validation fires alarm too often\n    const articles = task.isLastPage ? getArticles(page) : validateParse(getArticles, [isNotEmptyArray])(page);\n\n    return articles.map((elem, index)=> extractFrontInfoForOneAd(elem, index, task.pageNumber))\n}\n\n\n\n"],"sourceRoot":"/source/"}