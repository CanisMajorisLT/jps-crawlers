{"version":3,"sources":["crawlers/cvb/main.js"],"names":["taskSuccessHandler","config","onDone","handleTaskFail","handleTaskSuccess","adsParser","FRONT_PAGE_URI","worker","handler","FrontInfoFetchingQueue","queue","general","workers","DEFAULT_WORKERS_NUMBER","undefined","drain","setQueue","replace","pages","info","tasks","task","push","parseCVB"],"mappings":";;;;;;;yDAWA,iBAAwBA,kBAAxB,EAA4CC,MAA5C,EAAoDC,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,sCAFR,GAEyB,oCAAyB,KAAzB,CAFzB;AAGUC,yCAHV,GAG8B,oCAAyB,KAAzB,EAAgCJ,kBAAhC,CAH9B;AAIUK,iCAJV,GAIsB,yCAA8BC,cAA9B,2BAJtB;AAMUC,8BANV,GAMmB,4CAAmBF,SAAnB,EAA8BF,eAAeK,OAA7C,EAAsDJ,iBAAtD,CANnB;AAOUK,8CAPV,GAOmC,gBAAOC,KAAP,CAAaH,MAAb,EAAqBN,OAAOU,OAAP,CAAeC,OAAf,IAA0BC,sBAA/C,CAPnC;;AAQI,4BAAGX,WAAWY,SAAd,EAAyBL,uBAAuBM,KAAvB,GAA+Bb,MAA/B;;AAGzBC,uCAAea,QAAf,CAAwBP,sBAAxB,EAXJ,CAWqD;;AAXrD;AAAA,+BAawB,iCAAsBH,eAAeW,OAAf,CAAuB,SAAvB,EAAkC,GAAlC,CAAtB,gCAbxB;;AAAA;AAaUC,6BAbV;;AAcI,yCAAOC,IAAP,kBAA2BD,KAA3B;;AAEME,6BAhBV,GAgBkB,kCAAuBF,KAAvB,EAA8B,CAA9B,EAAiCjB,OAAOoB,IAAxC,CAhBlB;;;AAkBIZ,+CAAuBa,IAAvB,CAA4BF,KAA5B;;AAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeG,Q;;;;;AAXf;;;;AACA;;AACA;;AACA;;AAEA;;;;;;;;AAEA,IAAMjB,iBAAiB,sCAAvB;AACA,IAAMO,yBAAyB,CAA/B;;kBAwBeU,Q","file":"crawlers/cvb/main.js","sourcesContent":["import { default as async_ } from 'async'\nimport { extractTotalPageCount, extractFrontInfo } from './parser'\nimport { queueWorkerFactory } from '../lib/queueWorkerFactory'\nimport { generateFrontInfoTasks, getNumberOfFrontPages,\n         parseFrontPageArticlesFactory, handleTaskSuccessFactory, handleTaskFailureFactory } from '../lib/main'\nimport logger from '../../../logging/logger'\n\nconst FRONT_PAGE_URI = 'http://www.cvbankas.lt/?page=${page}';\nconst DEFAULT_WORKERS_NUMBER = 1;\n\n\nasync function parseCVB(taskSuccessHandler, config, onDone) {\n\n    let handleTaskFail = handleTaskFailureFactory('CVB');\n    const handleTaskSuccess = handleTaskSuccessFactory('CVB', taskSuccessHandler);\n    const adsParser = parseFrontPageArticlesFactory(FRONT_PAGE_URI, extractFrontInfo);\n\n    const worker = queueWorkerFactory(adsParser, handleTaskFail.handler, handleTaskSuccess);\n    const FrontInfoFetchingQueue = async_.queue(worker, config.general.workers || DEFAULT_WORKERS_NUMBER);\n    if(onDone !== undefined) FrontInfoFetchingQueue.drain = onDone;\n\n\n    handleTaskFail.setQueue(FrontInfoFetchingQueue); // so task can be requeued on fail\n\n    const pages = await getNumberOfFrontPages(FRONT_PAGE_URI.replace('${page}', '1'), extractTotalPageCount);\n    logger.info(`Page count: ${pages}`);\n\n    const tasks = generateFrontInfoTasks(pages, 1, config.task);\n\n    FrontInfoFetchingQueue.push(tasks)\n}\n\nexport default parseCVB\n\n"],"sourceRoot":"/source/"}