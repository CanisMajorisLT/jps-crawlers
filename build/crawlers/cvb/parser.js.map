{"version":3,"sources":["crawlers/cvb/parser.js"],"names":["extractFrontInfo","extractTotalPageCount_","html","page","load","pagesCount","children","last","text","parseInt","extractTotalPageCount","extractFrontInfoForOneAd","element","index","pageNumber","ad","getUri","attr","getTitle","getId","getCompanyName","getSecondaryCompanyName","remove","trim","getCity","uri","title","city","company","companySecondary","id","meta","adIndex","task","getArticles","get","articles","isLastPage","map","elem"],"mappings":";;;;;;QAkEgBA,gB,GAAAA,gB;;AAlEhB;;;;AACA;;;;AAGA;;;;;;AAMA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC,QAAMC,OAAO,kBAAEC,IAAF,CAAOF,IAAP,CAAb;;AAEA,QAAMG,aAAaF,KAAK,iBAAL,EAAwBG,QAAxB,GAAmCC,IAAnC,GAA0CC,IAA1C,EAAnB;;AAEA,WAAOH,eAAe,EAAf,GAAoBI,SAASJ,UAAT,CAApB,GAA2CA,UAAlD;AACH;;AAEM,IAAIK,wDAAwB,+BAAcT,sBAAd,EAAsC,sBAAtC,CAA5B;;AAIP,SAASU,wBAAT,CAAkCC,OAAlC,EAA2CC,KAA3C,EAAkDC,UAAlD,EAA8D;AAC1D,QAAIC,KAAK,kBAAEX,IAAF,CAAOQ,OAAP,CAAT;;AAEA,aAASI,MAAT,CAAgBD,EAAhB,EAAoB;AAChB,eAAOA,GAAG,GAAH,EAAQE,IAAR,CAAa,MAAb,CAAP;AACH;;AAED,aAASC,QAAT,CAAkBH,EAAlB,EAAsB;AAClB,eAAOA,GAAG,eAAH,EAAoBP,IAApB,EAAP;AACH;;AAED,aAASW,KAAT,CAAeJ,EAAf,EAAmB;AACf,eAAON,SAASM,GAAG,wBAAH,EAA6BE,IAA7B,CAAkC,OAAlC,CAAT,CAAP;AACH;;AAED,aAASG,cAAT,CAAwBL,EAAxB,EAA4B;AACxB,eAAOA,GAAG,mBAAH,EAAwBE,IAAxB,CAA6B,KAA7B,CAAP;AACH;;AAED,aAASI,uBAAT,CAAiCN,EAAjC,EAAqC;AACjCA,WAAG,uBAAH,EAA4BO,MAA5B;AACA,eAAOP,GAAG,oBAAH,EAAyBP,IAAzB,GAAgCe,IAAhC,EAAP;AACH;;AAED,aAASC,OAAT,CAAiBT,EAAjB,EAAqB;AACjB,eAAOA,GAAG,uBAAH,EAA4BP,IAA5B,EAAP;AACH;;AAED,WAAO;AACHiB,aAAK,+BAAcT,MAAd,EAAsB,8BAAtB,EAA0CD,EAA1C,CADF;AAEHW,eAAO,+BAAcR,QAAd,EAAwB,8BAAxB,EAA4CH,EAA5C,CAFJ;AAGHY,cAAM,+BAAcH,OAAd,EAAuB,8BAAvB,EAA2CT,EAA3C,CAHH;AAIHa,iBAAS,+BAAcR,cAAd,EAA8B,8BAA9B,EAAkDL,EAAlD,CAJN;AAKHc,0BAAkB,+BAAcR,uBAAd,EAAuC,8BAAvC,EAA2DN,EAA3D,CALf;AAMHe,YAAI,+BAAcX,KAAd,EAAqB,sBAArB,EAAiCJ,EAAjC,CAND;AAOHgB,cAAO;AACHC,qBAASnB,KADN;AAEHC;AAFG;;AAPJ,KAAP;AAaH;;AAGM,SAASd,gBAAT,CAA0BE,IAA1B,EAAgC+B,IAAhC,EAAqC;AACxC,QAAI9B,OAAO,kBAAEC,IAAF,CAAOF,IAAP,CAAX;;AAEA,aAASgC,WAAT,CAAqB/B,IAArB,EAA2B;AACvB,eAAOA,KAAK,sBAAL,EAA6BgC,GAA7B,EAAP;AACH;;AAED;AACA,QAAMC,WAAWH,KAAKI,UAAL,GAAkBH,YAAY/B,IAAZ,CAAlB,GAAsC,+BAAc+B,WAAd,EAA2B,6BAA3B,EAA8C/B,IAA9C,CAAvD;;AAEA,WAAOiC,SAASE,GAAT,CAAa,UAACC,IAAD,EAAO1B,KAAP;AAAA,eAAgBF,yBAAyB4B,IAAzB,EAA+B1B,KAA/B,EAAsCoB,KAAKnB,UAA3C,CAAhB;AAAA,KAAb,CAAP;AACH","file":"crawlers/cvb/parser.js","sourcesContent":["import $ from 'cheerio'\nimport { validateParse, isNotEmptyString, isNumber, isNotEmptyArray } from '../lib/validators'\n\n\n/**\n * Finds number of pages that display ads\n * @param {String} html\n * @returns {Number | String}\n * @private\n */\nfunction extractTotalPageCount_(html) {\n    const page = $.load(html);\n\n    const pagesCount = page('.pages_ul_inner').children().last().text();\n\n    return pagesCount !== '' ? parseInt(pagesCount) : pagesCount\n}\n\nexport let extractTotalPageCount = validateParse(extractTotalPageCount_, [isNumber]);\n\n\n\nfunction extractFrontInfoForOneAd(element, index, pageNumber) {\n    var ad = $.load(element);\n\n    function getUri(ad) {\n        return ad('a').attr('href')\n    }\n\n    function getTitle(ad) {\n        return ad('.list_cell h3').text()\n    }\n\n    function getId(ad) {\n        return parseInt(ad('form input[name=ad_id]').attr('value'))\n    }\n\n    function getCompanyName(ad) {\n        return ad('div.list_cell img').attr('alt')\n    }\n\n    function getSecondaryCompanyName(ad) {\n        ad('span.jobadlist_salary').remove();\n        return ad('.heading_secondary').text().trim()\n    }\n\n    function getCity(ad) {\n        return ad('span[class=list_city]').text()\n    }\n\n    return {\n        uri: validateParse(getUri, [isNotEmptyString])(ad),\n        title: validateParse(getTitle, [isNotEmptyString])(ad),\n        city: validateParse(getCity, [isNotEmptyString])(ad),\n        company: validateParse(getCompanyName, [isNotEmptyString])(ad),\n        companySecondary: validateParse(getSecondaryCompanyName, [isNotEmptyString])(ad),\n        id: validateParse(getId, [isNumber])(ad),\n        meta : {\n            adIndex: index,\n            pageNumber\n        }\n\n    }\n}\n\n\nexport function extractFrontInfo(html, task){\n    var page = $.load(html);\n\n    function getArticles(page) {\n        return page('#job_ad_list article').get()\n    }\n\n    // last page can sometimes have no ads, so validation fires alarm too often\n    const articles = task.isLastPage ? getArticles(page) : validateParse(getArticles, [isNotEmptyArray])(page);\n\n    return articles.map((elem, index)=> extractFrontInfoForOneAd(elem, index, task.pageNumber))\n}\n\n\n\n"],"sourceRoot":"/source/"}