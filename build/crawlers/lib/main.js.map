{"version":3,"sources":["crawlers/lib/main.js"],"names":["uri","parser","html","parseInt","error","getNumberOfFrontPages","generateFrontInfoTasks","parseFrontPageArticlesFactory","handleTaskSuccessFactory","handleTaskFailureFactory","DEFAULT_TASK_DELAY","DEFAULT_TASK_REQUEUE","DEFAULT_TASK_RETRY","DEFAULT_TASK_RETRY_INTERVAL","defaultConfig","generateFrontInfoTask","pageNumber","isLastPage","config","expires","requeue","timesRequeued","retry","retryInterval","delay","n","startIndex","tasks","i","push","task","fullUri","replace","parseFrontPage","site","callback","handleTaskSuccess","result","info","queue","handleTaskFailure","debug","handler","setQueue","q"],"mappings":"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","file":"crawlers/lib/main.js","sourcesContent":["import { getPageBody } from './scrape'\nimport { datePlusHours } from './utils'\nimport logger from '../../../logging/logger'\n\nconst DEFAULT_TASK_DELAY = 1000;\nconst DEFAULT_TASK_REQUEUE = 5;\nconst DEFAULT_TASK_RETRY = 3;\nconst DEFAULT_TASK_RETRY_INTERVAL = 200;\n\nconst defaultConfig = {\n    DEFAULT_TASK_DELAY,\n    DEFAULT_TASK_REQUEUE,\n    DEFAULT_TASK_RETRY,\n    DEFAULT_TASK_RETRY_INTERVAL\n};\n\n\n/**\n * Generates object used for doing parse task\n * @param pageNumber\n * @param {boolean} isLastPage\n * @param {object=} config\n * @returns {{pageNumber: *, expires: *, requeue: number, timesRequeued: number, retry: number, retryInterval: number, delay: number}}\n */\nfunction generateFrontInfoTask(pageNumber, isLastPage, config = defaultConfig) {\n    return {\n        pageNumber,\n        expires: datePlusHours(1),\n        requeue: config.DEFAULT_TASK_REQUEUE, // optional\n        timesRequeued: 0, // optional\n        retry: config.DEFAULT_TASK_RETRY, // optional\n        retryInterval: config.DEFAULT_TASK_RETRY_INTERVAL, // optional\n        delay: config.DEFAULT_TASK_DELAY, //optional\n        isLastPage\n    }\n}\n\n/**\n * Generates n number of tasks for worker\n * @param {number} n\n * @param {number=0} startIndex\n * @param {object} config\n * @returns {Array}\n */\nexport function generateFrontInfoTasks(n, startIndex = 0, config) {\n    const tasks = [];\n    for (var i = startIndex; i <= n; i++) {\n        tasks.push(generateFrontInfoTask(i, i === n, config))\n    }\n\n    return tasks\n}\n\n/**\n * Parses given uri with provided parser to get number of pages to parse\n * @param {string} uri\n * @param {function} parser\n * @returns {Number}\n */\nexport async function getNumberOfFrontPages(uri, parser) {\n    try {\n        let html = await getPageBody(uri);\n        return parseInt(parser(html));\n    } catch (error) {\n        logger.error('getNumberOfFrontPages threw error', error);\n    }\n}\n\n/**\n * Parses given page to extract all info about ads.\n * Used as task in queue worker.\n * @param {string} uri\n * @param {function} parser\n * @returns {function} parseFrontPage\n */\nexport function parseFrontPageArticlesFactory(uri, parser) {\n\n    return async function parseFrontPage(task) {\n        const fullUri = uri.replace('${page}', task.pageNumber);\n        const html = await getPageBody(fullUri);\n\n        return parser(html, task);\n    }\n}\n\nexport function handleTaskSuccessFactory(site, callback) {\n    return function handleTaskSuccess({result: result, task: task}) {\n        logger.info(`${site} Successfully finished parsing front page nr ${task.pageNumber}`);\n\n        // write to DB\n        callback && callback(result, site, task)\n    }\n}\n\n\n\n\nexport function handleTaskFailureFactory(site) {\n    let queue;\n\n    function handleTaskFailure({error: error, task: task}) {\n        logger.error(`${site} Task failed`, {error, task});\n        if (task.requeue && task.requeue > 0 && (task.timesRequeued < task.requeue)) {\n            ++task.timesRequeued;\n\n            queue.push(task)\n        } else {\n            logger.debug('Task failed too many times, all requeues exausted');\n        }\n    }\n\n    return {\n        handler: handleTaskFailure,\n        setQueue: (q)=> {queue = q}\n    }\n}\n\n\n\n"],"sourceRoot":"/source/"}