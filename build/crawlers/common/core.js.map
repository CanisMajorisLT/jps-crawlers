{"version":3,"sources":["crawlers/common/core.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;wDA6DO,iBAAqC,GAArC,EAA0C,MAA1C;YAEK;;;;;;;+BAAa,yBAAY,GAAZ;;;AAAb;yDACG,SAAS,OAAO,IAAP,CAAT;;;;;;AAEP,yCAAO,KAAP,CAAa,mCAAb;;;;;;;;KALD;;oBAAe;;;;;;;;;;;;;;QAfN;QA+BA;QAUA;QAYA;;;;;;;;;;;;;;;;;;;;AA7FhB,IAAM,qBAAqB,IAArB;AACN,IAAM,uBAAuB,CAAvB;AACN,IAAM,qBAAqB,CAArB;AACN,IAAM,8BAA8B,GAA9B;;AAEN,IAAM,gBAAgB;AAClB,0CADkB;AAElB,8CAFkB;AAGlB,0CAHkB;AAIlB,4DAJkB;CAAhB;;;;;;;;;AAeN,SAAS,qBAAT,CAA+B,UAA/B,EAA2C,UAA3C,EAA+E;QAAxB,+DAAS,6BAAe;;AAC3E,WAAO;AACH,8BADG;AAEH,iBAAS,0BAAc,CAAd,CAAT;AACA,iBAAS,OAAO,oBAAP;AACT,uBAAe,CAAf;AACA,eAAO,OAAO,kBAAP;AACP,uBAAe,OAAO,2BAAP;AACf,eAAO,OAAO,kBAAP;AACP,8BARG;KAAP,CAD2E;CAA/E;;;;;;;;;AAoBO,SAAS,sBAAT,CAAgC,CAAhC,EAA2D;QAAxB,mEAAa,iBAAW;QAAR,sBAAQ;;AAC9D,QAAM,QAAQ,EAAR,CADwD;AAE9D,SAAK,IAAI,IAAI,UAAJ,EAAgB,KAAK,CAAL,EAAQ,GAAjC,EAAsC;AAClC,cAAM,IAAN,CAAW,sBAAsB,CAAtB,EAAyB,MAAM,CAAN,EAAS,MAAlC,CAAX,EADkC;KAAtC;;AAIA,WAAO,KAAP,CAN8D;CAA3D,SA+BS,6BAAT,CAAuC,GAAvC,EAA4C,MAA5C,EAAoD;;AAEvD;4DAAO,kBAA8B,IAA9B;gBACG,SACA;;;;;AADA,sCAAU,IAAI,OAAJ,CAAY,SAAZ,EAAuB,KAAK,UAAL;;mCACpB,yBAAY,OAAZ;;;AAAb;8DAEC,OAAO,IAAP,EAAa,IAAb;;;;;;;;SAJJ;;wBAAe;;;OAAtB,CAFuD;CAApD;;AAUA,SAAS,wBAAT,CAAkC,IAAlC,EAAwC,QAAxC,EAAkD;AACrD,WAAO,SAAS,iBAAT,OAAyD;YAArB,cAAR,OAA6B;YAAP,YAAN,KAAa;;AAC5D,yBAAO,IAAP,CAAe,yDAAoD,KAAK,UAAL,CAAnE;;;AAD4D,gBAI5D,IAAY,SAAS,MAAT,EAAiB,IAAjB,EAAuB,IAAvB,CAAZ,CAJ4D;KAAzD,CAD8C;CAAlD;;AAYA,SAAS,wBAAT,CAAkC,IAAlC,EAAwC;AAC3C,QAAI,iBAAJ,CAD2C;;AAG3C,aAAS,iBAAT,QAAuD;YAApB,cAAP,MAA2B;YAAP,aAAN,KAAa;;AACnD,yBAAO,KAAP,CAAgB,qBAAhB,EAAoC,EAAC,YAAD,EAAQ,UAAR,EAApC,EADmD;AAEnD,YAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,GAAe,CAAf,IAAqB,KAAK,aAAL,GAAqB,KAAK,OAAL,EAAe;AACzE,cAAE,KAAK,aAAL,CADuE;;AAGzE,kBAAM,IAAN,CAAW,IAAX,EAHyE;SAA7E,MAIO;AACH,6BAAO,KAAP,CAAa,mDAAb,EADG;SAJP;KAFJ;;AAWA,WAAO;AACH,iBAAS,iBAAT;AACA,kBAAU,kBAAC,CAAD,EAAM;AAAC,oBAAQ,CAAR,CAAD;SAAN;KAFd,CAd2C;CAAxC","file":"crawlers/common/core.js","sourcesContent":["import { getPageBody } from './scrape'\r\nimport { default as async_ } from 'async'\r\nimport { datePlusHours } from './utils'\r\nimport { queueWorkerFactory } from './queueWorkerFactory'\r\nimport logger from '../../../logging/logger'\r\n\r\nconst DEFAULT_TASK_DELAY = 1000;\r\nconst DEFAULT_TASK_REQUEUE = 5;\r\nconst DEFAULT_TASK_RETRY = 3;\r\nconst DEFAULT_TASK_RETRY_INTERVAL = 200;\r\n\r\nconst defaultConfig = {\r\n    DEFAULT_TASK_DELAY,\r\n    DEFAULT_TASK_REQUEUE,\r\n    DEFAULT_TASK_RETRY,\r\n    DEFAULT_TASK_RETRY_INTERVAL\r\n};\r\n\r\n\r\n/**\r\n * Generates object used for doing parse task\r\n * @param pageNumber\r\n * @param {boolean} isLastPage\r\n * @param {object=} config\r\n * @returns {{pageNumber: *, expires: *, requeue: number, timesRequeued: number, retry: number, retryInterval: number, delay: number}}\r\n */\r\nfunction generateFrontInfoTask(pageNumber, isLastPage, config = defaultConfig) {\r\n    return {\r\n        pageNumber,\r\n        expires: datePlusHours(1),\r\n        requeue: config.DEFAULT_TASK_REQUEUE, // optional\r\n        timesRequeued: 0, // optional\r\n        retry: config.DEFAULT_TASK_RETRY, // optional\r\n        retryInterval: config.DEFAULT_TASK_RETRY_INTERVAL, // optional\r\n        delay: config.DEFAULT_TASK_DELAY, //optional\r\n        isLastPage\r\n    }\r\n}\r\n\r\n/**\r\n * Generates n number of tasks for worker\r\n * @param {number} n\r\n * @param {number=0} startIndex\r\n * @param {object} config\r\n * @returns {Array}\r\n */\r\nexport function generateFrontInfoTasks(n, startIndex = 0, config) {\r\n    const tasks = [];\r\n    for (var i = startIndex; i <= n; i++) {\r\n        tasks.push(generateFrontInfoTask(i, i === n, config))\r\n    }\r\n\r\n    return tasks\r\n}\r\n\r\n/**\r\n * Parses given uri with provided parser to get number of pages to parse\r\n * @param {string} uri\r\n * @param {function} parser\r\n * @returns {Number}\r\n */\r\nexport async function getNumberOfFrontPages(uri, parser) {\r\n    try {\r\n        let html = await getPageBody(uri);\r\n        return parseInt(parser(html));\r\n    } catch (error) {\r\n        logger.error('getNumberOfFrontPages threw error', error);\r\n    }\r\n}\r\n\r\n/**\r\n * Parses given page to extract all info about ads.\r\n * Used as task in queue worker.\r\n * @param {string} uri\r\n * @param {function} parser\r\n * @returns {function} parseFrontPage\r\n */\r\nexport function parseFrontPageArticlesFactory(uri, parser) {\r\n\r\n    return async function parseFrontPage(task) {\r\n        const fullUri = uri.replace('${page}', task.pageNumber);\r\n        const html = await getPageBody(fullUri);\r\n\r\n        return parser(html, task);\r\n    }\r\n}\r\n\r\nexport function handleTaskSuccessFactory(site, callback) {\r\n    return function handleTaskSuccess({result: result, task: task}) {\r\n        logger.info(`${site} Successfully finished parsing front page nr ${task.pageNumber}`);\r\n\r\n        // write to DB\r\n        callback && callback(result, site, task)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function handleTaskFailureFactory(site) {\r\n    let queue;\r\n\r\n    function handleTaskFailure({error: error, task: task}) {\r\n        logger.error(`${site} Task failed`, {error, task});\r\n        if (task.requeue && task.requeue > 0 && (task.timesRequeued < task.requeue)) {\r\n            ++task.timesRequeued;\r\n\r\n            queue.push(task)\r\n        } else {\r\n            logger.error('Task failed too many times, all requeues exausted');\r\n        }\r\n    }\r\n\r\n    return {\r\n        handler: handleTaskFailure,\r\n        setQueue: (q)=> {queue = q}\r\n    }\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":"/source/"}