{"version":3,"sources":["../../src/crawlers/common/validators.js"],"names":[],"mappings":";;;;;;QAWgB;QAmBA;QAIA;QAIA;QAMA;;;;;;;;;;;;;;AAjCT,SAAS,aAAT,CAAuB,GAAvB,EAA4B,UAA5B,EAAwC;;AAC3C,QAAM,aAAa,IAAI,IAAJ,CADwB;;AAG3C,aAAS,8BAAT,GAA0C;AACtC,YAAM,UAAU,UAAU,CAAV,CAAV,CADgC;AAEtC,YAAM,SAAS,IAAI,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAT,CAFgC;;AAItC,mBAAW,OAAX,CAAmB,UAAC,SAAD,EAAc;AAC7B,gBAAI,CAAC,UAAU,MAAV,CAAD,EAAoB;AACpB,sBAAM,6BAAgB,QAAQ,IAAR,GAAe,QAAQ,IAAR,EAAf,GAAgC,OAAhC,EAAyC,UAAzD,EAAqE,UAAU,IAAV,CAA3E,CADoB;aAAxB;SADe,CAAnB,CAJsC;;AAUtC,eAAO,MAAP,CAVsC;KAA1C;;AAaA,WAAO,8BAAP,CAhB2C;CAAxC;;AAmBA,SAAS,gBAAT,CAA0B,CAA1B,EAA6B;AAChC,WAAO,MAAM,EAAN,CADyB;CAA7B;;AAIA,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACxB,WAAO,sBAAU,CAAV,CAAP,CADwB;CAArB;;AAIA,SAAS,eAAT,CAAyB,CAAzB,EAA4B;AAC/B,WAAO,qBAAQ,CAAR,KAAc,EAAE,MAAF,GAAW,CAAX,CADU;CAA5B;;AAIA,IAAM,gDAAoB,qBAApB;;AAEN,SAAS,oBAAT,CAA8B,CAA9B,EAAiC;AACpC,WAAO,MAAM,iBAAN,CAD6B;CAAjC","file":"validators.js","sourcesContent":["import { isArray, isFinite as isNumber_ } from 'lodash'\r\nimport { makeParserError } from './errors'\r\n\r\n/**\r\n * Wraps a html parser function and validates its return value against\r\n * supplied validators. On validation fail, throw custom parser error.\r\n *\r\n * @param {Function} fnc\r\n * @param {Array} validators\r\n * @returns {Function}\r\n */\r\nexport function validateParse(fnc, validators) { //TODO test\r\n    const parserName = fnc.name;\r\n\r\n    function errorWrapperForParserFunctions() {\r\n        const element = arguments[0];\r\n        const result = fnc.apply(this, arguments);\r\n\r\n        validators.forEach((validator)=> {\r\n            if (!validator(result)) {\r\n                throw makeParserError(element.html ? element.html() : element, parserName, validator.name)\r\n            }\r\n        });\r\n\r\n        return result\r\n    }\r\n\r\n    return errorWrapperForParserFunctions\r\n}\r\n\r\nexport function isNotEmptyString(v) {\r\n    return v !== ''\r\n}\r\n\r\nexport function isNumber(v) {\r\n    return isNumber_(v)\r\n}\r\n\r\nexport function isNotEmptyArray(v) {\r\n    return isArray(v) && v.length > 0\r\n}\r\n\r\nexport const ELEMENT_NOT_FOUND = '@@ELEMENT_NOT_FOUND';\r\n\r\nexport function isNotElementNotFound(v) {\r\n    return v !== ELEMENT_NOT_FOUND\r\n}\r\n\r\n\r\n\r\n"]}